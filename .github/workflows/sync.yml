name: Sync Repo with Upstream

on:
  workflow_dispatch:
  schedule:
    # Runs every 8 hours
    - cron: "0 */8 * * *"

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/TerraFirmaGreg-Team/Modpack-Modern.git
          git fetch upstream --tags

      - name: Get latest upstream tag
        id: latest_upstream
        run: |
          LATEST_TAG=$(git ls-remote --tags upstream | awk '{print $2}' | sed 's|refs/tags/||' | sort -V | tail -n1)
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Get latest local shelf tag for this upstream
        id: latest_shelf
        run: |
          # Find the highest -shelfN tag for this upstream tag
          LATEST_SHELF=$(git tag --list "${{ steps.latest_upstream.outputs.latest_tag }}-shelf*" | sort -V | tail -n1)
          echo "latest_shelf=$LATEST_SHELF" >> $GITHUB_OUTPUT

      - name: Get latest local shelf base version
        id: latest_shelf_base
        run: |
          # Find the base version of the latest shelf tag (strip -shelfN)
          LATEST_SHELF_BASE=$(git tag --list '*-shelf*' | sed 's/-shelf[0-9]*$//' | sort -V | tail -n1)
          echo "latest_shelf_base=$LATEST_SHELF_BASE" >> $GITHUB_OUTPUT

      - name: Check if new upstream tag exists
        id: check_new
        run: |
          if [ -z "${{ steps.latest_upstream.outputs.latest_tag }}" ]; then
            echo "No upstream tag found" && exit 1
          fi
          # Only sync if the latest upstream tag is greater than the latest shelf base version
          if [ "${{ steps.latest_upstream.outputs.latest_tag }}" \<= "${{ steps.latest_shelf_base.outputs.latest_shelf_base }}" ]; then
            echo "No new upstream tag to sync (semver check)" && exit 0
          fi

      - name: Create sync branch
        id: sync_branch
        run: |
          git checkout -b sync-upstream-${{ steps.latest_upstream.outputs.latest_tag }}
          git merge --allow-unrelated-histories upstream/${{ steps.latest_upstream.outputs.latest_tag }} || true

      - name: Push sync branch
        run: |
          git push origin HEAD:sync-upstream-${{ steps.latest_upstream.outputs.latest_tag }}

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}
          branch: sync-upstream-${{ steps.latest_upstream.outputs.latest_tag }}
          title: "Sync upstream tag ${{ steps.latest_upstream.outputs.latest_tag }}"
          body: |
            This PR merges changes from upstream tag `${{ steps.latest_upstream.outputs.latest_tag }}` into this fork.
            Please review and resolve any conflicts.
          base: main

  tag-main:
    name: Tag main after upstream sync PR merge
    runs-on: ubuntu-latest
    needs: check-upstream
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if last commit is a merge from sync-upstream-*
        id: check_merge
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $LAST_COMMIT_MSG"
          if ! echo "$LAST_COMMIT_MSG" | grep -qE 'Merge pull request #[0-9]+.*from .*/sync-upstream-'; then
            echo "Not a merge from a sync-upstream-* branch. Skipping tag."
            exit 78
          fi

      - name: Get latest upstream tag
        run: |
          git remote add upstream https://TerraFirmaGreg-Team/Modpack-Modern.git || true
          git fetch upstream --tags
          LATEST_TAG=$(git ls-remote --tags upstream | awk '{print $2}' | sed 's|refs/tags/||' | sort -V | tail -n1)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Find next shelfN tag
        id: next_shelf
        run: |
          TAG_BASE="$LATEST_TAG"
          EXISTING=$(git tag --list "$TAG_BASE-shelf*" | sed 's/.*-shelf//' | sort -n | tail -n1)
          if [ -z "$EXISTING" ]; then
            NEXT=1
          else
            NEXT=$((EXISTING+1))
          fi
          echo "NEXT_SHELF=$NEXT" >> $GITHUB_ENV
          echo "NEW_TAG=$TAG_BASE-shelf$NEXT" >> $GITHUB_ENV

      - name: Create and push new shelf tag
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
